---
title: "R café: day 1"
# title-slide-attributes:
#   data-background-image: imgs/intro_github/git-suite.jpeg
#   data-background-size: contain
#   data-background-opacity: "0.5"
format: 
  revealjs:
    css: "../styles.css"
    df-print: paged
    slide-number: true
    logo: "./imgs/oucru-logo.png"
    code-copy: true
---

## About the course {auto-animate="true"}

This course is a pilot phase of a future course "***R-cafe:** R for reproducible research*"

In this pilot phase, the following topics will be covered

-   **Foundations of R** - introduction to working with RStudio, R and Github

-   **Tidyverse** - introduce important tools for cleaning data in R

-   **Markdown/Quarto and \`gtsummary\`** - introduce gtsummary for analysis and creating report with Markdown/Quarto

## About the course {auto-animate="true"}

By the end of this course, you will be able to conduct an end-to-end data analysis process on a dummy data and create a report using R and RMarkdown/Quarto

Teaching team:

-   Hai Ho Bich (haihb\@oucru.org)
-   Thinh Ong Phuc (thinhop\@oucru.org)
-   Tuyen Huynh Ngoc (tuyenhn\@oucru.org)
-   Anh Phan Truong Quynh (anhptq\@oucru.org)
-   Hung Tran Thai (hungtt\@oucru.org)

# Set up

## Prerequisite

::: callout-tip
## Before this lesson, you should have:

-   R and RStudio installed

-   a Github account, Github Desktop installed
:::

## Overview

::: callout-note
-   Github Desktop

-   Intro to RStudio

-   R project (create R project, set up renv)

-   Intro to R
:::

# Git ![](imgs/intro_github/git-icon.png){.inline-img} and GitHub ![](imgs/intro_github/github-icon.png){.inline-img}

## Git ![](imgs/intro_github/git-icon.png){.inline-img} vs. GitHub ![](imgs/intro_github/github-icon.png){.inline-img} {auto-animate="true"}

:::{.incremental}
- **Git** is a [version control system]{.underline}, its purpose is to keep track of changes of files within a [repository]{.underline} and provide the capability to [revert to previous version]{.underline}
- **GitHub** is a cloud-based service to [host]{.underline} Git repository, its main purpose is to store and/or share your Git project with collaborators
:::

## Local vs. Remote {auto-animate="true"}

:::{.incremental}
- **Local** means your physical computer. When we say **local** we are talking about what's happening **directly on** your computer
- **Remote** can mean a computing cloud, a server, or someone else's computer. When we say **remote** we are talking about what's happening **not on** your computer, i.e. remotely.
:::

## Git ![](imgs/intro_github/git-icon.png){.inline-img} and GitHub ![](imgs/intro_github/github-icon.png){.inline-img} {auto-animate="true"}

:::{.incremental}
- **Git** is a software that works **locally**. You don't need GitHub for Git to work. You can use Git as-is
- **GitHub** acts as a **remote** server for Git, so that you can share your project and collaborate with others remotely
- A **repository** is a place where Git *tracks all of your changes* to files and folders. GitHub stores a copy of your repository whenever you **push** to it
:::

## Git ![](imgs/intro_github/git-icon.png){.inline-img} and GitHub ![](imgs/intro_github/github-icon.png){.inline-img}

::: callout-note
### Terminologies

- **Branch**: a separate environment, identical copy of **where and when** you branch from
- **Commit**: packaging all the changes you made into a **"version"**
- **Push**: pushing a commit (a "version") to remote, e.g. GitHub
- **Pull**: updating your local repository with changes from remote
- **Add**: chosing which changes you want to commit
:::

## Git ![](imgs/intro_github/git-icon.png){.inline-img} and GitHub ![](imgs/intro_github/github-icon.png){.inline-img}

![](imgs/intro_github/git_push_pull.png)


## Git ![](imgs/intro_github/git-icon.png){.inline-img} and GitHub ![](imgs/intro_github/github-icon.png){.inline-img}

::: callout-important
- **Git is a standalone software**, which works fully locally.  You can use Git without GitHub
- **GitHub is a platform** for collaboration. It uses Git as the [version control system]{.underline}
:::

# GitHub Desktop ![](imgs/intro_github/github-desktop-icon.png){.inline-img}

## GitHub Desktop ![](imgs/intro_github/github-desktop-icon.png){.inline-img} {.scrollable}

- **Git** is a command-line interface (CLI) software.

![](imgs/intro_github/git-cli.png)

::: callout-caution
We strongly recommend **to not use Git through its CLI**. It is not fun and **you will lose your work** because of a typo.
:::

## GitHub Desktop ![](imgs/intro_github/github-desktop-icon.png){.inline-img}

:::{.incremental}
- **GitHub Desktop** is a software that makes it easier for you to use Git. It is a software **built by GitHub**, again, separate from Git
- **Advantages**:
  - Simplifies everything and only provide commonly used functionalities of Git
  - Reduces the chances that you will make errors in using Git
  - Direct integration to GitHub, makes it easier for authentication
:::

# Setting up GitHub Desktop ![](imgs/intro_github/github-desktop-icon.png){.inline-img} for R Café

## Setting up GitHub Desktop ![](imgs/intro_github/github-desktop-icon.png){.inline-img}

::: callout-note
### Checklist

- Sign in to your account in GitHub Desktop
- Clone R Cafe into your computer/laptop. [Link](https://github.com/OUCRU-Modelling/R-cafe){target="_blank"}
- Create your own branch
- Publish (push) your branch
:::

Refer to the handouts for instructions

## R and RStudio {auto-animate="true"}

**R** is a programming language for statistical computing and data visualization.

**RStudio** is a software designed to make working with R easier by helping you create, edit, and manage R code and projects. More formally, it is known as an Integrated Development Environment (IDE).

## R and RStudio {auto-animate="true"}

**Why use R?**

::: {.incremental}
-   **Cost**: R is free and open-source.

-   **Reproducibility**: Programming in R (as opposed to point-click tools such as Excel/Access) enhances reproducibility, error detection, and reduces manual workload.

-   **Community**: R has a large, collaborative user base, with new tools and packages for analysis developed constantly.
:::

# R project

## Create Project in RStudio {auto-animate="true"}

An **R project** is a directory with `.Rproj` file, signaling RStudio to manage the project settings accordingly.

::: {.fragment}
The process of creating an R project is as followed

-   In the menu **`File` \> `New Project…`**

-   Click **`Existing Directory` \>** **`Browse`**

-   Click **`Browse`** and click on your project directory

-   Click **`Create Project`**
:::

## RStudio interface {auto-animate="true"}

![](imgs/r_foundation/rstudio_components.png)

## RStudio interface {auto-animate="true"}

::: medium-text-size
Consists of 4 main panes

-   **Source code**: Show the content of a source code file

-   **Console**: Show the executed code lines and their output

-   **Defined variables**: Show the currently defined variables

-   **Files/Plot/Package/Help**:

    -   Files: for files nagivation

    -   Plots: show plot output

    -   Packages: show all the installed packages and packages being used (packages in use will have a ✓)

    -   Help: show documentations for functions or packages
:::

## Project structure {auto-animate="true"}

A minimal R project structure will have the following format

```         
└── my_project
    ├── output
    ├── data
    │   ├── raw
    │   └── processed
    └── analysis.R 
```

Where

-   `data` folder contains data to be analyzed

-   `output` stores code output (plot, figures, etc.)

-   `analysis.R` is the file containing R code. There can be multiple `.R` files under 1 project.

## Naming convention {#sec-file-naming}

::: medium-text-size
::: callout-note
Some rules of thumb for naming files and folders:

-   Do not use diacritics (e.g. Vietnamese accent marks).

-   Do not use overly long names, keep it short but meaningful.

-   Do not include special characters such as `/`, `\`, `&`, `,`, `(`, `)`\... in names. It's best to use only letters and numbers.

-   Avoid mixing uppercase and lowercase letters arbitrarily. If necessary, use naming conventions like camelCase (capitalize the first letter of each word after the first one, e.g., `dataSoiHcm`) or PascalCase (capitalize the first letter of all words, e.g., `DataSoiHcm`).

-   Do not include spaces (`" "`) in names. Instead, you can use camelCase, or replace spaces with `-` or `_`. For example, instead of naming a file `data soi HCM 2023.xlsx`, you could name it `dataSoiHcm2023.xlsx`, `data-soi-hcm-2023.xlsx`, or `data_soi_hcm_2023.xlsx`.

:::
:::

# Project environment

## Set up renv {auto-animate="true"}

To use renv for your project

-   Click `Tools` \> `Project Options…` \> `Environments`

-   Tick `Use renv with this project`

Which creates `renv.lock` file and a folder `renv` in your project

## Why use renv? {auto-animate="true"}

::: medium-text-size

::: incremental
-   Encapsulate the development environment of your R projects (R version, packages used and their versions) in a file called `renv.lock`

-   Ensure collaborators to replicate your R project's development environment by simply running `renv::restore()`

-   Isolate installed packages under project directory for more convenient management. With renv set up, the installed packages are stored under

    -   `path_to_project/renv/library/{R-version}/{device-architecture}/`
    
:::

::: fragment

::: callout-tip
### What are packages? 

An R package is a shareable bundle of functions. We will frequently use available packages to assist us during coding process.
:::

:::

:::

# R foundations

## R script {auto-animate="true"}

To create an R script in RStudio, in the menu section, click `File` \> `New File` \> `R Script`

R script is where you store your R code and comments.

**Comments** are notes to explain your code to other developers (or your future self, when you revisit the code). To comment in R simply add `#` at the start of your note.

## R script {auto-animate="true"}

***Example:*** Some R codes and comment

```{r}
# this is a comment, and the following code will print Hello world in the console
print("Hello world")

# you can also perform computations in R
# In R, you can denote 
# - multiplication as *
# - power as **
# - devision as /
# - e5 is the shorthand notation for *10**5
12*10e5 + 313**2 - 11890/2
```

## Variable {auto-animate="true"}

::: medium-text-size
In R, a **variable** is a name used to store an **object**, such as a dataset, vector, number, or graph. Once assigned to a variable, the object can be easily referenced and reused in future commands.

In R, a variable can be created by assigning an object to it using `<-`

As previously mentioned, an object can be a number, string, vector of characters, etc.

```{r}
# assigning 3.14 to the variable pi_numb
pi_numb <- 3.14
# which can then be referenced 
pi_numb

# object can also be a text/characters
greeting <- "Hello World" # note that it must be contained within quotation marks
greeting
```
:::

## Variable {auto-animate="true"}

Value of a variable can also be overridden

```{r}
var <- 5
var
# override variable
var <- "new value"
var
```

::: callout-note
### Naming variable {.callout-note}

The rule for naming variable is similar to that of naming file/folder names (See @sec-file-naming)

Additionally, variable name needs to be [**concise**]{.underline} and beware of [**overriding values**]{.underline}
:::

## Classes {.scrollable auto-animate="true"}

::: medium-text-size
All the objects stored in R have a class which tells R how to handle the object. There are many possible classes, but common ones include

+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
| Classes      | Explanation                                                                                               | Examples                           |
+==============+===========================================================================================================+====================================+
| `numeric`    | for numerical data, including decimals                                                                    | `3.14`, `-1000`, `10`, `2e6`, etc. |
+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
| `logical`    | for boolean data (`TRUE`/`FALSE`) **without quotation marks**                                             | `TRUE` or `FALSE`                  |
+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
| `character`  | for text/characters data (also referred to as string)                                                     | `"Hello world"`, `"R Cafe"`, etc.  |
+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
| `Date`       | data classified as Date can be displayed and manipulated in special ways                                  | `2024-12-09` , `s`, etc.           |
+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
| `factor`     | for categorical data                                                                                      | gender: female or male,            |
|              |                                                                                                           |                                    |
|              |                                                                                                           | economic status,                   |
|              |                                                                                                           |                                    |
|              |                                                                                                           | district, ethnicity, etc.          |
+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
| `data.frame` | common way for R to store dataset.                                                                        |                                    |
|              |                                                                                                           |                                    |
|              | Consists of vectors (columns, each column must be of a specific class) of data bounded together.          |                                    |
+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
| `tibble`     | an "enhanced" version of `data.frame` which is less prone to error and printed more nicely in the console |                                    |
+--------------+-----------------------------------------------------------------------------------------------------------+------------------------------------+
:::

## Special values {auto-animate="true"}
::: medium-text-size
+--------------+---------------------------------------------------------------------------------------------------------------+
| Value        | Description                                                                                                   |
+==============+===============================================================================================================+
| `NA`         | Stands for [Not Available]{.underline}. Indicates missing values.                                             |
+--------------+---------------------------------------------------------------------------------------------------------------+
| `NULL`       | Indicates undefined/abscence of value. (e.g. `numb <- NULL` indicates value for variable `numb` is undefined) |
+--------------+---------------------------------------------------------------------------------------------------------------+
| `NaN`        | Stands for [Not a Number]{.underline}. Indicates unrepresentable number (e.g. result for `0/0` )              |
+--------------+---------------------------------------------------------------------------------------------------------------+
| `Inf`/`-Inf` | Infinity/Negative infinity                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------------------+
:::

## Functions {auto-animate="true"}

A function is a **reusable** sequence of code.

It can be created using the syntax

```{r, eval=FALSE}
function_name <- function(){

# function content

}
```

## Functions {auto-animate="true"}

***Example:*** a simple function

```{r}
print_hello <- function(){
  print("Hello world")
  print("This is R Cafe course")
}

# defined function can then be called as followed
print_hello()
```

## Functions {auto-animate="true"}

Functions can also have arguments, which creates reusable code with **dynamic inputs and outputs**

A function with arguments as followed. Note that you can include as many arguments as you want

```{r, eval=FALSE}
function_name <- function(argument_1, argument_2){
  # function content
  # values of argument can be accessed simply calling argument name
}
```

## Functions {auto-animate="true"}

***Example:*** simple function

```{r}
compute_power <- function(base, power){
  # return a raised to the power of b
  base**power
}

# output can be assigned to a variable
output <- compute_power(base = 5, power = 2)
output
```

## Functions {auto-animate="true"}

::: callout-note
You can provide value for each argument [without specifying the name]{.underline} but it must follow the same order in the function definition.

However, **it is generally recommended to include the name of the argument** for better readability. When argument name is specified, [order no longer matter]{.underline}.

```{r}
compute_power(5, 2) 
compute_power(2, 5) # expect different result (2^5)

compute_power(base = 5, power = 2)
compute_power(power = 2, base = 5) # expect same result
```
:::

## Functions {.scrollable auto-animate="true"}

::: medium-text-size
**When to create a function?**

A general rule is when you start to [copy-paste a sequence of code multiple times]{.underline} (usually \>3), you should make a function for it

The in-class excercise (@sec-inclass) will demonstrate one use case for function
:::


## Functions {auto-animate="true"}

::: medium-text-size
**Some criteria for a good function**

::: incremental

-   **Modularity** - each function should focus on ***one task*** (e.g. you can have a function to import data, another to model the data, another to visualize data but [**not**]{.underline} a function doing all of those 3 tasks)

-   **Concise -** the content of a function should not be too lengthy. If a function starts to have \> 30 lines of code, it may be an indication that the modularity rule is violated.

-   **Readability** - function's name should clearly describe its purpose (e.g. compute_min, plot_case, etc.), and the content should be properly commented and documented.

:::

:::

## Functions {auto-animate="true"}

::: medium-text-size
R is a functional programming language, which means you will encounter a lot of functions while coding in R.

To assist users, R also include a built-in documentation system that explains the purpose and usage of each function. To look up a function, use `?` or `help()`

```{r}
# look up documentation for `sqrt` function
?sqrt
help(sqrt)
```

Note that the built-in documentation only helps when you [already know which function you want to ask about]{.underline}. If you are looking for a function to achieve a specific task, it is better to start with **search engine** (Google, Bing, etc.), **forums/Q&A sites** (Github discussions, StackOverflow, etc.) or even ChatGPT.
:::

## Functions {auto-animate="true"}

::: medium-text-size
The documentation that show up when calling `help()` or `?` are usually generated from something called roxygen documentation.

To create a roxygen documentation, place the cursor within the function and from the menu, click `Code` \> `Insert Roxygen Skeleton`

```{r}
#' Compute power
#' 
#' Takes two arguments, `base` and `power` then return base raised to given power
#'
#' @param base - a numeric value for base number
#' @param power - a numeric value for power
#'
#' @return numeric value for base^power
#' @examples
#' compute_power(3,4)
compute_power <- function(base, power){
  # return a raised to the power of b
  base**power
}

compute_power(5, 2)
```
:::

## Function `set.seed()` {visibility="hidden"}

::: medium-text-size
`set.seed()` is essential to [ensure reproducibility for processes that uses a random number generator]{.underline}

A seed is an input value to generate the "random data". By specifying the same seed, we can ensure the number generator always [return the same result]{.underline}.

```{r}
# Set seed 
set.seed(123)

# Generate sample data
sample_data <- rnorm(10, mean = 50, sd = 10)  
sample_data
```
:::

## Vectorization {visibility="hidden"}

::: medium-text-size
**Vectorization** refers to performing an operation on [all items of a vector at once]{.underline} instead of going through each item in a loop.

Code using vectorized functions are also much cleaner than using for loop

***Example:*** Given a vector of numeric, and square all the odd numbers while divide even numbers by 2

```{r}
non_vectorized <- function(numbs){
  for (i in 1:length(numbs)){ # go through each number in numbs
    if (numbs[i] %%2 == 0){
      numbs[i] <- numbs[i]/2
    }else{
      numbs[i] <- numbs[i]**2
    }
  }
  
  numbs
}

vectorized <- function(numbs){
  numbs <- ifelse(numbs %%2 == 0, numbs/2, numbs**2)
  
  numbs
}
```
:::

## Vectorization {visibility="hidden"}

***Example:*** Compare run time between 2 approahces

```{r}
# non vectorization approach
system.time(
  non_vectorized(c(1:100000))
)

# vectorized approach
system.time(
  vectorized(c(1:100000))
)
```

## Scope {auto-animate="true"}

**Brainstorming** Read the code and guess the answer for 3 Questions below

```{r, eval = FALSE}
#| error: true
example_var <- 10

example_func <- function(arg){
  print(paste0("Value of variable example_var: ", example_var))
  
  example_var <- 20
  
  print(paste0("Value of variable example_var after assignment: ", example_var))
  print(paste0("Value of function argument: ", arg)) 
}

# Q1: What will the 2 print statements show?
example_func(60) 
# Q2: What will be the value for example_var here?
paste0("Value of variable example_var: ", example_var)
# Q3: What will be the value for arg here?
arg  
```

## Scope {.scrollable auto-animate="true"}
**Output**
```{r, error = TRUE}
#| error: true
example_var <- 10

example_func <- function(arg){
  print(paste0("Value of variable example_var: ", example_var))
  
  example_var <- 20
  
  print(paste0("Value of variable example_var after assignment: ", example_var))
  print(paste0("Value of function argument: ", arg)) 
}

# Q1: What will the 2 print statements show?
example_func(60) 
# Q2: What will be the value for example_var here?
paste0("Value of variable example_var: ", example_var)
# Q3: What will be the value for arg here?
arg  
```


## Scope {auto-animate="true"}

![](imgs/r_foundation/scope_fig.png){width="544"}


## Scope {.scrollable auto-animate="true"}
**Explanation**
```{r}
#| error: true
# this is a global variable since it is not created in any local environment
example_var <- 10

example_func <- function(arg){
  # global_var
  print(paste0("Global variable can be accessed within function ", example_var))
  
  # this is creating a local variable named example_var
  # it will not affect example_var
  example_var <- 20
  
  # this example_var refers to the local variable example_var
  print(paste0("Value of variable example_var after assignment", example_var))
  # note that argument is also only accessible within the function
  print(paste0("Function argument ", arg))
}

example_func(60) 
# value for argument should only accessible within function 
arg  
# refers to global variable example_var here 
paste0("Value of variable example_var ", example_var)
```


## Scope {auto-animate="true"}
::: medium-text-size
**Scope** refers to where variables can be accessed or modified.

To put simply

::: incremental
-   By default, variables can be modified only in the environment in which it was created (unless they were forced to, but it is [**not**]{.underline} recommended).

-   **global variables** can be accessed anywhere within the session.

-   **local variables** are variables defined in a local environment and can only be accessed within that local environment. The most common local environment you will encounter is environment within a function.
:::

:::

## Packages {auto-animate="true"}

::: medium-text-size
2 options to install an R packages

-   Via RStudio interface.

    -   In the `File/Plots/Packages/Help` panel

    -   Click `Packages` \> `Install`

    -   Type name of the packages to be installed separated by `,`

    -   Click install

-   Using R code `install.packages("package_name")`
:::

## Packages {auto-animate="true"}
::: medium-text-size
***Example:*** Download package for reading Excel files

```{r eval=FALSE}
install.packages("readxl")
```

::: callout-note
### Update `renv.lock`
To update your `renv.lock` after changing development environment, run the code `renv::snapshot()`
:::
:::

## Packages {auto-animate="true"}

{{< downloadthis ../data/linelist_raw.xlsx dname="linelist_raw" label="linelist_raw.xlsx" type=light >}}

To use a package, you must first load it to R using `library()` function

```{r}
library(readxl)
data <- read_excel("../data/linelist_raw.xlsx")
head(data)
```

## Packages {auto-animate="true"}

Similar to functions, you can also look up documentation for packages using `?` or `help()`

```{r}
# --- look up documentation for package ---
?readxl
help(readxl)

# --- look up documentation for function of the package ---
?readxl::read_excel
help(read_excel, package= readxl)
```

# In-class exercise {#sec-inclass}
## Goal {auto-animate="true"}
::: callout-note
In this exercise, you will:

- Create a function from the given code 

- Push your code to Github

- Comment code
:::

## Code file {auto-animate="true"}
In your R project, navigate to the template code file `day1/inclass.R`.

Then run all the code in the file, this should create a dataset `covid_cases`.

This is also where you will write the solution for in-class exercise.

## Create function {auto-animate="true"}
::: medium-text-size
***Dataset***
Given a dataset with number of reported cases for 211 countries

Where each column following the format `cases_{country_code}` represents the number of newly reported Covid cases on the day shown in `date` columns

```{r echo=FALSE, warning=FALSE}
library(outbreaks)
library(tidyverse)

covid_cases <- sarscov2_who_2019 %>% 
  select(date, matches("^cases_[[:alpha:]]{3}$")) %>% 
  mutate_at(
    # compute new cases per day from cumulative cases
    vars(matches("^cases_[[:alpha:]]{3}$")), 
    ~ c(0, diff(., differences = 1))
  )
```

```{r}
head(covid_cases)
```
:::

## Create function {.scrollable auto-animate="true"}
::: medium-text-size
***Goal*** Create a function that allow users to choose compute basic statistics (min, max, mean, quartiles) for number cases of each country.

Given the code to compute basic stats for case reports in China (`cases_chn`) is as followed

```{r}
case_col <- "cases_chn"

basic_stats <- c(
  min =  min(covid_cases[[case_col]]),
  q1 = quantile(covid_cases[[case_col]], 0.25, names=FALSE),
  median = median(covid_cases[[case_col]]),
  q3 = quantile(covid_cases[[case_col]], 0.75, names=FALSE),
  max = max(covid_cases[[case_col]])
)

basic_stats
```

::: callout-note
The syntax `data[[column_name]]` is used for extracting values in a column
:::
:::

```{r include=FALSE}
# plot_col <- "cases_chn"
# country <- "China"
# 
# ggplot(data = covid_cases) +
#   geom_line(
#     aes(date, y = !! sym(plot_col) ), # define columns for x, y axis
#     color = "blue" # choose color for line plot
#   ) + 
#   labs(
#     y = "Cases",
#     x = "Date",
#     title = sprintf("Reported Covid cases for %s", country)
# )
```

## Suggested solution {.scrollable auto-animate="true"}

***Exercise:*** Suggested solution

```{r, output=FALSE}
#| code-fold: true
compute_stats <- function(data, colname){
  return(
    c(
      min = min(data[[colname]]),
      q1 = quantile(data[[colname]], 0.25, names=FALSE),
      median = median(data[[colname]]),
      q3 = quantile(data[[colname]], 0.75, names=FALSE),
      max = max(data[[colname]])
    )
  )
}
compute_stats(covid_cases, colname = "cases_chn")
```

```{r include=FALSE}
# plot_cases <- function(data, plot_col="cases_chn", country="China", ylab = "Cases", xlab = "Date"){
#   ggplot(data = data) +
#   geom_line(
#     aes(date, y = !! sym(plot_col) ), # define columns for x, y axis
#     color = "blue" # choose color for line plot
#   ) + 
#   labs(
#     y = ylab,
#     x = xlab,
#     title = sprintf("Reported Covid cases for %s", country)
#   )
# }
# 
# plot_cases(covid_cases, plot_col="cases_kor", country = "Korea")
```

## Navigating Github Desktop & Github
Once you have created the function, complete the following tasks on Github Desktop and Github (refer to the handout for detailed instructions)

::: callout-note
- Push your code to Github using Github Desktop

- Create an issue on Github once you have had your code on Github

- Create a comment on Github for at least one other participant's code
:::

# Data manipulation in R

## Data import {auto-animate="true"}

Some useful import functions

| Function       | Package  | Description                          |
|----------------|----------|--------------------------------------|
| `read_excel()` | `readxl` | import Excel (`.xlsx`, `.xls`) files |
| `read_csv()`   | `readr`  | import `.csv` files                  |
| `readRDS()`    | `base`   | import `.rds` files                  |
| `load()`       | `base`   | import `.rda` files                  |

## Data import {.scrollable auto-animate="true"}

::: medium-text-size
`rio` - support data import for multiple data format
:::

```{r}
library(rio)
import("../data/linelist_raw.xlsx", skip = 2)
```

## Data export {auto-animate="true"}

Some useful export function in R

| Function       | Package   | Description                 |
|----------------|-----------|-----------------------------|
| `write_xlsx()` | `writexl` | export data as Excel files  |
| `write.csv()`  | `utils`   | export data as `.csv` files |
| `saveRDS()`    | `base`    | export data as `.rds` files |
| `save()`       | `base`    | export data `.rda` files    |

## Clean column names {auto-animate="true"}

The thing we usually do first after importing data is check the column names, to do that we use function `colnames()`

```{r}
colnames(data)
```

## Clean column names {auto-animate="true"}

::: medium-text-size
You may notice some names go against the "rule of thumb" for naming

To quickly resolve this, package `janitor` offers `clean_names()` function to automatically fix the naming
:::

```{r}
library(janitor)
data <- clean_names(data)
head(data)
```

## Simple data extraction {.scrollable auto-animate="true"}

::: medium-text-size
Data cell(s) can be extracted using the syntax `data[row, col]`

-   To extract all rows, left `col` blank

-   To extract all cols, left `row` blank

```{r}
#| df-print: kable

# get the cell at row 5, column 2
data[5 ,2]

# column can also be accessed using column name
data[5 , "hosp_date"]

# get all values in the 5th row
data[5, ]

# extract specific columns
data[, c("case_id", "infection_date", "date_onset", "hosp_date")] 

# extract first 10 rows from specific columns
data[1:10, c("case_id", "infection_date", "date_onset", "hosp_date")] 
```
:::

## Data summary {auto-animate="true"}

In base R, function `summary()` is used to have the basic statistics of each variables in the dataset

```{r}
summary(data)
```

## Data summary {.scrollable auto-animate="true"}

::: medium-text-size
However, function `skim()` from package `skimr` can return a better table output with tables grouped by class of data

```{r}
library(skimr)
skim(data)
```
:::

## Recap {auto-animate="true"}

After today, you have learnt to:

-   Create an R project and set up a project environment

-   How to upload your project to Github using Github Desktop

-   Understand R variables and classes, functions, packages

-   How to look up documentations for functions and packages

-   Perform data import, export, overview in R

## Exercise {.scrollable auto-animate="true" visibility="hidden"}

-   Create an R project

-   Install packages

    -   Install package `outbreak`

-   Create your first R Script

    -   Create an R script in your project

    -   In your script, load package `outbreaks`

    -   Load a dataset to R and perform data overview

    -   Write a function for the given snippet of code

-   Upload the code to github

-   Peer reviews

## Upcoming lessons

::: medium-text-size
Data cleaning in R

`tidyverse` package for

-   Data cleaning, handling tricky datatypes (string, Date, factor, etc.)

-   Data visualization using `ggplots`

Data analysis in R

-   Demographic analysis, perform statistical tests using `gtsummary`

-   Creating report using `Rmarkdown`/`Quarto`
:::
