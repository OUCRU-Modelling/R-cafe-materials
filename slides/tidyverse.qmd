---
title: "R programming with `tidyverse`"
format: 
  revealjs:
    df-print: paged
    slide-number: true
    logo: "imgs/oucru-logo.png"
---

## Session overview {.scrollable}

What will be covered:

- **Into the `tidyverse`**
    - What is `tidyverse`?
    - Why should we use it?
    - How do we use it?
- **Vectorise R functions**
    - Vectors and vectorisation
    - Vectorisation with `map()` vs. `*apply()`
    - Piping with `%>%` and `|>`
    - `tidyverse` style vs. base R style
- **`ggplot2` for data visualization**
    - Grammar of graphics
    - The typical flow
- **Whole game**


# Into the `tidyverse`

## What is `tidyverse`?

- `tidyverse` is a **collection of R packages** built for data science
- All packages shared the same principle of **tidy data**
- Consists of 8 core packages, and a dozen more packages for various specific purposes

## What is `tidyverse`?

### Tidy data

- A dataset with rows and columns
- Each *column* is a *variable*
- Each *row* is an *observation*
- Each *cell* contains *1 value* only


## What is `tidyverse`?

### Tidy data {.scrollable}

Which of these is a tidy data table

```{r}
#| echo: false
tibble::tribble(
  ~country, ~ code, ~ "2015", ~ "2016",
  "Aruba", "ABW", 28419.264, 28449.713,
  "Albania", "ALB", 3952.8036, 4124.055
)
```

or

```{r}
#| echo: false
tibble::tribble(
  ~country, ~ code, ~ year, ~ gdp,
  "Aruba", "ABW", 2015, 28419.2645,
  "Aruba", "ABW", 2016, 28449.713,
  "Albania", "ALB", 2015, 3952.8036,
  "Albania", "ALB", 2016, 4124.055,
)
```


## What is `tidyverse`?

![](imgs/tidyverse/tidy-packages.png)


## Why `tidyverse`? {.scrollable}

- Every function in `tidyverse` **shares a consistent structure and pattern**. Making it very easy to implement and edit your R code
- Outputs are also easier to read and consistent
- *In general*, your R code *may* look cleaner and easier to follow, compared to base R
- You just need to install everything once, instead of different packages for different things

::: callout-note
*This is all subjective and your experience with `tidyverse` may varies*
:::

## Why `tidyverse`?

::: callout-important
### Takeaway points

1. `tidyverse` is not a replacement of base R. **It is just a collection of R packages**
2. You don't have to use `tidyverse` when using R
3. `tidyverse` has most functions for data science needs. Though, there are times base R will be needed, and might be better/easier/faster
4. Understanding the principles and goals of `tidyverse` will better your knowledge on good coding practices and R
:::

## How to use `tidyverse`

Start by installing it!

```{r}
#| eval: false
install.packages("tidyverse")
```

::: callout-note
*Most* packages will be installed. You might need some more packages, but generally it should cover most of your needs.
:::


## How to use `tidyverse`

Then load it into your R environment!

```{r}
library(tidyverse)
```

:::callout-tip
You can load specific packages like `library(dplyr)`, but it doesn't matter in most cases.
:::

## How to use `tidyverse`

Run this example code below to make sure everything is running normally

```{r}
#| echo: true
#| output-location: slide
diamonds %>%
  group_by(clarity) %>%
  summarise(mean_price = mean(price)) %>%
  ungroup() %>%
  ggplot(aes(x = clarity, y = mean_price)) +
  geom_col()
```

::: callout-tip
### Free R tip
type `?function_name` for help on how to use a function **and see which package is it coming from**
:::

## How to use `tidyverse`
::: callout-tip
### Free R tip
add "tidyverse" into your Google searches when looking for R issues
:::

# Vectorise R functions

## What is a vector?

:::{.incremental}
- A vector is a **container of elements of similar classes**
- In math, $[1\space 2\space 3]$ is a vector of 3 integers
- In R
  - `c(1, 2, 3)` is a vector of 3 `numeric` elements
  - `c("ab", "cd", "ef")` is a vector of 3 `character` elements
  - `c(c(1, 2), c(2, 3), c(3, 4))` is a vector of 3 `vector` elements, each is a vector of 2 `numeric` elements
:::

## Sidetrack
:::{.fragment}
- See how confusing this looks?
```{r}
c(c(1, 2), c(2, 3), c(3, 4))
```
:::

:::{.fragment}
- How about now:
```{r}
c(
  c(1, 2),
  c(2, 3),
  c(3, 4)
)
```
:::

:::{.fragment}
- Spending a few seconds to properly format your code can help both others and yourselves
:::

## What is a vector? {.scrollable}
:::{.fragment}
- In R, vectors can also be named

```{r}
c("year_2000" = 51, "year_2001" = 38, "year_2002" = 44)
```

- These are usually called `list`s
:::

## For-loops

- In programming, we typically use for-loops to go through elements within a vector
- Example:
  - We have `c(-24, 84, -20, -64)` and we want to get the absolute of this vector
  - What are the ways to solve this problem?


## For-loops

- Using for-loops:
```{r}
covid_cases <- read_rds("../data/covid_cases.rds")
covid_cases
```


## Vectorisation

- Perform vectorisation with `sapply()`:
```{r}
x <- c(-24, 84, -20, -64)
x <- sapply(x, FUN = abs)

x
```


## Vectorisation

Uhhh... ok? We saved 1-2 lines of code? What's the deal?


## Vectorisation

- R has a **functional** style, which means vectorisation fits better and is more intuitive
- On a technical level:
  - R itself *might be slightly* faster when doing vectorisation, compared to for-loops
  - for more complex and time-consuming functions, it is easier to **paralellise** with vectorisation


## Vectorisation with `map()` vs. `*apply()`

- Recall what is "vectorisation"


## Vectorisation with `map()` vs. `*apply()`

Vectorisation vs. looping