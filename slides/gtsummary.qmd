---
title: "Reproducible tables"
format: 
  html:
    code-overflow: wrap
    code-copy: true
---

[Intro to Quarto](quarto.qmd)

::: callout-note

Install the following packages

```{r}
#| eval: false
install.packages(c("gtsummary", "broom.helpers"))
```

Download data here:

{{< downloadthis ../data/simulated_covid.rds dname="simulated_covid" label="simulated_covid.rds" type=light >}}

:::

## Dataset

```{r}
#| warning: false
library(gtsummary)
library(tidyverse)

df <- readRDS("../data/simulated_covid.rds")
```

First, let's take a look at the data:

```{r}
head(df)
```

::: callout-important

## Question

Is this data tidy?

:::

The dataset is a line list, where each row represents a case with details such as sex, age, and outcome. This outbreak is interesting for its two distinct peaks. After a slight decrease in case counts in July, the numbers rose again.

```{r}
#| code-fold: true
#| fig-width: 5
#| fig-height: 3
#| out-width: "100%"
df %>% 
  count(date_onset) %>% 
  ggplot(
    aes(
      x = date_onset, y = n, 
      text = paste0("Ngày: ", date_onset, "\n", "Số ca: ", n)
      )
    ) + 
  geom_bar(stat = "identity", fill = "cornflowerblue") + 
  labs(x = "Date of onset", y = "Case count") +
  theme_classic()
```

## Descriptive tables

At the start of any analysis, it's common to present a demographic table that summarises the characteristics of our sample. This can be done easily using `tbl_summary()` from the `gtsummary` package:

```{r}
df %>% 
  tbl_summary(
    include = c(sex, age, outcome, outbreak)
  )
```

The variable labels and values in your table might not appear as expected. Let's fix this, starting with the labels:

```{r}
df %>%
  tbl_summary(
    include = c(sex, age, outcome, outbreak),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome", outbreak ~ "Outbreak")
  )
```

Now, let's correct the values:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    include = c(sex, age, outcome, outbreak),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome", outbreak ~ "Outbreak")
  )
```

It looks pretty good now, but your supervisor mentioned that the number of decimals in your tables should be consistent. For example, percentages and continuous variables should both have one decimal place. Let's fix that:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    include = c(sex, age, outcome, outbreak),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome", outbreak ~ "Outbreak"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1)
  )
```

Okay, now the `Age` is displayed as the median with the quantile range, but your supervisor prefers it to be shown as the mean $\pm$ standard deviation. Let's change it:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    include = c(sex, age, outcome, outbreak),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome", outbreak ~ "Outbreak"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(
      all_continuous() ~ "{mean} \u00b1 {sd}"
    )
  )
```

**Extra tip for Vietnamese theses**: Change the decimal mark from `.` to `,`.

```{r}
#| message: false
theme_gtsummary_language(language = "en", big.mark = ".", decimal.mark = ",")

df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    include = c(sex, age, outcome, outbreak),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome", outbreak ~ "Outbreak"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(
      all_continuous() ~ "{mean} \u00b1 {sd}"
    )
  )
```

```{r}
#| echo: false
#| message: false
theme_gtsummary_language(language = "en", big.mark = ",", decimal.mark = ".")
```

## Statistical inference

The most common goal is to compare two groups and make inferences. In `gtsummary`, you can do this by simply copying the code for the descriptive table and adding the `by = group_variable` argument. Just remember to remove the `group_variable` from `include` if you included it in the descriptive table.

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    by = outbreak,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(
      all_continuous() ~ "{mean} \u00b1 {sd}"
    )
  )
```

Look good now! You probably need p-values. Add them using the `add_p()` function.

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    by = outbreak,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(
      all_continuous() ~ "{mean} \u00b1 {sd}"
    )
  ) %>% 
  add_p()
```

Again, your supervisor wants p-values displayed with three decimal digits. Let do it:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    by = outbreak,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(all_continuous() ~ "{mean} \u00b1 {sd}")
  ) %>%
  add_p(
    pvalue_fun = function(x)
      style_pvalue(x, digits = 3)
  )
```

You discovered that the default test is the Wilcoxon test, but now you want to use the t-test for age. Specify it in `add_p()` like this:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    by = outbreak,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(all_continuous() ~ "{mean} \u00b1 {sd}")
  ) %>%
  add_p(
    pvalue_fun = function(x)
      style_pvalue(x, digits = 3),
    test = list(age ~ "t.test")
  )
```

We're nearly there. Your supervisor (yet again) wants an overall column. Simply add it using `add_overall()`:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    by = outbreak,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(all_continuous() ~ "{mean} \u00b1 {sd}")
  ) %>%
  add_p(
    pvalue_fun = function(x)
      style_pvalue(x, digits = 3),
    test = list(age ~ "t.test")
  ) %>% 
  add_overall()
```

Great! Finally, we usually highlight small p-values to guide readers to the exciting findings. Just use `bold_p()` and set the threshold you want: 

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_summary(
    by = outbreak,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    digits = c(all_categorical() ~ c(0, 1), all_continuous() ~ 1),
    statistic = list(all_continuous() ~ "{mean} \u00b1 {sd}")
  ) %>%
  add_p(
    pvalue_fun = function(x)
      style_pvalue(x, digits = 3),
    test = list(age ~ "t.test")
  ) %>%
  add_overall() %>%
  bold_p(t = 0.05)
```

## Univariate analysis

The next step in a typical analysis is to perform a univariate analysis and calculate the odds ratio (OR) for each variable:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_uvregression(
    method = glm,
    y = outbreak,
    method.args = list(family = binomial),
    exponentiate = TRUE,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    pvalue_fun = function(x)
      style_pvalue(x, digits = 3)
  ) %>%
  bold_p(t = 0.05)
```

If you want to hide the sample size, add `hide_n = TRUE`:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  tbl_uvregression(
    method = glm,
    y = outbreak,
    method.args = list(family = binomial),
    exponentiate = TRUE,
    hide_n = TRUE,
    include = c(sex, age, outcome),
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    pvalue_fun = function(x)
      style_pvalue(x, digits = 3)
  ) %>%
  bold_p(t = 0.05)
```

## Multivariate analysis

Finally, you might want to run a multivariate analysis to adjust these OR values for confounders:

```{r}
df %>%
  mutate(sex = factor(
    sex,
    levels = c("f", "m"),
    labels = c("Female", "Male")
  ),
  outcome = str_to_sentence(outcome)) %>%
  glm(outbreak ~ sex + age + outcome, data = ., family = binomial) %>%
  tbl_regression(
    exponentiate = TRUE,
    label = list(sex ~ "Sex", age ~ "Age (years)", outcome ~ "Outcome"),
    pvalue_fun = function(x)
      style_pvalue(x, digits = 3)
  ) %>% 
  bold_p(t = 0.05)
```

